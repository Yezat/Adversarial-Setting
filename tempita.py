
import os
def gen_from_templates(templates):
    """Generate cython files from a list of templates"""
    # Lazy import because cython is not a runtime dependency.
    from Cython import Tempita

    for template in templates:
        outfile = template.replace(".tp", "")

        # if the template is not updated, no need to output the cython file
        if not (
            os.path.exists(outfile)
            and os.stat(template).st_mtime < os.stat(outfile).st_mtime
        ):

            with open(template, "r") as f:
                tmpl = f.read()

            tmpl_ = Tempita.sub(tmpl)

            warn_msg = (
                "# WARNING: Do not edit this file directly.\n"
                f"# It is automatically generated from {template!r}.\n"
                "# Changes must be made there.\n\n"
            )

            with open(outfile, "w") as f:
                f.write(warn_msg)
                f.write(tmpl_)

if __name__ == "__main__":
    tempita_file = "_loss.pyx.tp"
    outfile = "_loss.pyx"
    gen_from_templates([tempita_file])